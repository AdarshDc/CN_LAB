//rsa
package CN;

import java.util.Scanner;
	public class BellmanFord 
	{
		private int num_ver;private int D[];
		public static final int MAX_VALUE=999;
		public BellmanFord(int num_ver)
		{
				this.num_ver=num_ver;
				D=new int[num_ver+1];
		}
		public void BellmanFordEvalution(int source,int A[][])
		{
			for(int node=1;node<=num_ver;node++)
			{
				D[node]=MAX_VALUE;
			}
			D[source]=0;
			for(int node=1;node<=num_ver-1;node++)
			{
				for(int sn=1;sn<=num_ver;sn++)
				{
					for(int dn=1;dn<=num_ver;dn++)
					{
						if(A[sn][dn]!=MAX_VALUE)
						{
							if(D[dn]>D[sn]+A[sn][dn])
								D[dn]=D[sn]+A[sn][dn];
						}
					}
				}
			}
			for(int vertex=1;vertex<=num_ver;vertex++)
			{
				System.out.println("distance from source"+source+" to "+vertex+" is "+D[vertex]);
			}
		}
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			int source;
			int num_ver=0;
			Scanner sc=new Scanner(System.in);
			System.out.println("enter the number of vertex");
			num_ver=sc.nextInt();
			int A[][]=new int[num_ver+1][num_ver+1];
			System.out.println("enter the adjacency matrix");
			for(int sn=1;sn<=num_ver;sn++)
			{
				for(int dn=1;dn<=num_ver;dn++)
				{
					A[sn][dn]=sc.nextInt();
					if(sn==dn)
						{
						A[sn][dn]=0;
						}
					if(A[sn][dn]==0)
					{
						A[sn][dn]=MAX_VALUE;
					}
				}
			}
			System.out.println("enter the source vertex");
			source=sc.nextInt();
			BellmanFord b=new BellmanFord(num_ver);
			b.BellmanFordEvalution(source, A);
			sc.close();
		}
}
